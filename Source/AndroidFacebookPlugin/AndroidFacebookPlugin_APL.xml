<?xml version="1.0" encoding="utf-8"?>
<!--GearVR plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<!-- init section is always evaluated once per architecture -->
	<trace enable="true"/>
	<init>
		<log text="Android Facebook init"/>		
		<copyDir src="$S(PluginDir)/../../Build" dst="$S(PluginDir)/../../../../Build" />		
	</init>
	
	<androidManifestUpdates>
		<addElements tag="application">
      <activity android:name="com.facebook.FacebookActivity"
          android:configChanges=
                 "keyboard|keyboardHidden|screenLayout|screenSize|orientation"
          android:theme="@android:style/Theme.Translucent.NoTitleBar"
          android:label="@string/app_name" />		  
    </addElements>
    
		<setStringFromProperty result="FacebookAppId" ini="Engine" section="/Script/AndroidFacebookPlugin.AndroidFacebookSettings" property="FacebookAppId" default="undefined"/>
    <setElement result="fbMetaData" value="meta-data"/>
    <addAttribute tag="$fbMetaData" name="android:name" value="com.facebook.sdk.ApplicationId"/>
    <addAttribute tag="$fbMetaData" name="android:value" value="fb$S(FacebookAppId)"/>
    <addElement tag="application" name="fbMetaData"/>
	</androidManifestUpdates>

	<!-- optional additions to proguard -->
	<proguardAdditions>
		<insert>
-keep class com.facebook.** { *; }
		</insert>
	</proguardAdditions>
	
	<!-- optional files or directories to copy to Intermediate/Android/APK -->
 	<resourceCopies>
	</resourceCopies>

	<!-- optional additions to the GameActivity imports in GameActivity.java -->
	<gameActivityImportAdditions>
		<insert>
			import android.content.pm.PackageInfo;
			import android.content.pm.Signature;
			import java.security.MessageDigest;
			import java.security.NoSuchAlgorithmException;
			import android.util.Base64;
			
			import org.json.*;
			import java.util.Arrays;
			
			import com.facebook.*;
			import com.facebook.FacebookSdk;
			import com.facebook.login.LoginManager;
			import com.facebook.login.LoginResult;
		</insert>
	</gameActivityImportAdditions>
	

	<!-- optional additions to the GameActivity class in GameActivity.java -->
	<gameActivityClassAdditions>
		<insert>
		private CallbackManager mFacebookCallbackManager;
		private FacebookCallback&lt;LoginResult&gt; mFacebookCallback;
		
		private long mFacebookLoginCallbackHandle;
		
		public native void nativeFbLoginCompleted(boolean success, String userId, String accessToken, String realName, long handle);
		
		public void AndroidThunkJava_Facebook_Login(long handle)
		{	
			Log.debug( "AndroidThunkJava_Facebook_Login()" );
			mFacebookLoginCallbackHandle = handle;
			
			if (AccessToken.getCurrentAccessToken() != null)
			{
				AccessToken.getCurrentAccessToken().refreshCurrentAccessTokenAsync();
				_activity.AndroidThunkJava_Facebook_FetchMe();
			}
			else 
			{
				LoginManager.getInstance().logInWithReadPermissions(_activity, Arrays.asList("public_profile", "user_friends"));
			}
		}
		
		public void AndroidThunkJava_Facebook_FetchMe()
		{
			Log.debug("Facebook fetch me");
				
			GraphRequest request = GraphRequest.newMeRequest(AccessToken.getCurrentAccessToken(), new GraphRequest.GraphJSONObjectCallback() {
				@Override
				public void onCompleted(JSONObject object, GraphResponse response) {
					// Application code
					Log.debug("Facebook response " + response.toString());
					
					String token = AccessToken.getCurrentAccessToken().getToken();
					Log.debug("Facebook token " + token);
					
					String userId = "";
					String realName = "";
					try {
						userId = object.getString("id");
						realName = object.getString("name");
					} catch (JSONException e) {							
						nativeFbLoginCompleted(false, userId, token, realName, mFacebookLoginCallbackHandle);
						return;
					} catch (NullPointerException e) {
						Log.debug("Facebook failed getting me");
						nativeFbLoginCompleted(false, userId, token, realName, mFacebookLoginCallbackHandle);
						return;
					}
					
          Log.debug("Facebook retrieved me");
					nativeFbLoginCompleted(true, userId, token, realName, mFacebookLoginCallbackHandle);
				}
			});
			request.executeAsync();
		}
		
		public native void nativeFbLogoutCompleted(long handle);
		
		public void AndroidThunkJava_Facebook_Logout(long handle)
		{	
			Log.debug( "AndroidThunkJava_Facebook_Logout()" );
			nativeFbLogoutCompleted(handle);
		}
		
		public String AndroidThunkJava_Facebook_GetProfileName()
		{	
			Log.debug( "AndroidThunkJava_Facebook_GetProfileName() " + Profile.getCurrentProfile().getName() );
			return Profile.getCurrentProfile().getName();
		}
		
		public native void nativeFbClearFriends(long handle);
		public native void nativeFbAddFriend(String id, String name, long handle);
		public native void nativeFbReadFriendsUsingGraphPathCompleted(boolean success, long handle);
		
		public void AndroidThunkJava_Facebook_ReadFriendsUsingGraphPath(final long handle)
		{	
			Log.debug( "AndroidThunkJava_Facebook_ReadFriendsUsingGraphPath()" );
			
			GraphRequest request = GraphRequest.newMyFriendsRequest(AccessToken.getCurrentAccessToken(), new GraphRequest.GraphJSONArrayCallback() {
				@Override
				public void onCompleted(JSONArray objects, GraphResponse response) {
					// Application code
					Log.debug("Facebook response " + response.toString());
					
					if (objects == null) {
						Log.debug("Facebook failed getting friends");
						nativeFbReadFriendsUsingGraphPathCompleted(false, handle);            
						return;
					}
					
					nativeFbClearFriends(handle);
					
					for (int i = 0; i &lt; objects.length(); ++i)
					{
						try {
							JSONObject object = objects.getJSONObject(i);
							String name = object.getString("name");
							String id = object.getString("id");
							
							nativeFbAddFriend(id, name, handle);
						} catch (JSONException e) {							
						}
					}
					
					nativeFbReadFriendsUsingGraphPathCompleted(true, handle);
				}
			});
			request.executeAsync();
		}
		</insert>
	</gameActivityClassAdditions>
	
	<!-- optional additions to GameActivity onCreate metadata reading in GameActivity.java -->
	<gameActivityReadMetadataAdditions>
		<insert>	
			
		</insert>
	</gameActivityReadMetadataAdditions>
	
	<!-- optional additions to GameActivity onCreate in GameActivity.java -->
	<gameActivityOnCreateAdditions>
		<insert>
		FacebookSdk.sdkInitialize(getApplicationContext());
		
		try {
			PackageInfo info = getPackageManager().getPackageInfo(getPackageName(), PackageManager.GET_SIGNATURES);
			for (Signature signature : info.signatures) {
				MessageDigest md = MessageDigest.getInstance("SHA");
				md.update(signature.toByteArray());
				Log.debug("KeyHash:" + Base64.encodeToString(md.digest(), Base64.DEFAULT));
			}
		} catch (PackageManager.NameNotFoundException e) {

		} catch (NoSuchAlgorithmException e) {

		}
		
		//init callbacks
		mFacebookCallback = new FacebookCallback&lt;LoginResult&gt; () {
		
			@Override
			public void onSuccess(LoginResult loginResult) {
				Log.debug("Facebook login " + loginResult.toString());
				_activity.AndroidThunkJava_Facebook_FetchMe();
			}
			@Override
			public void onCancel() {
				Log.debug("facebook login canceled");
				nativeFbLoginCompleted(false, "", "", "", mFacebookLoginCallbackHandle);
			}

			@Override
			public void onError(FacebookException e) {
				Log.debug("facebook login failed error");
				nativeFbLoginCompleted(false, "", "", "", mFacebookLoginCallbackHandle);
			}
		};
		mFacebookCallbackManager = CallbackManager.Factory.create();		
		LoginManager.getInstance().registerCallback(mFacebookCallbackManager, mFacebookCallback);
		</insert>
	</gameActivityOnCreateAdditions>

	<!-- optional additions to GameActivity onDestroy in GameActivity.java -->
	<gameActivityOnDestroyAdditions>
		<insert>		
		</insert>
	</gameActivityOnDestroyAdditions>
	
	
	<!-- optional additions to GameActivity onStart in GameActivity.java -->
	<gameActivityOnStartAdditions>
		<insert>		
		</insert>
	</gameActivityOnStartAdditions>

	<!-- optional additions to GameActivity onStop in GameActivity.java -->
	<gameActivityOnStopAdditions>
		<insert>		
		</insert>
	</gameActivityOnStopAdditions>
	

	<!-- optional additions to GameActivity onPause in GameActivity.java	-->
	<gameActivityOnPauseAdditions>
		<insert>
		</insert>
	</gameActivityOnPauseAdditions>


	<!-- optional additions to GameActivity onResume in GameActivity.java	-->
	<gameActivityOnResumeAdditions>
		<insert>
		</insert>
	</gameActivityOnResumeAdditions>


	<!-- optional additions to GameActivity onActivityResult in GameActivity.java -->
	<gameActivityOnActivityResultAdditions>
	<insert>
	mFacebookCallbackManager.onActivityResult(requestCode, resultCode, data);
	</insert>
	</gameActivityOnActivityResultAdditions>
	

	<!-- optional libraries to load in GameActivity.java before libUE4.so -->
	<soLoadLibrary>
		<!-- need this if plugin enabled and supported architecture, even if not packaged for GearVR -->
	<!-- 	<if condition="bSupported">
			<true>
				<loadLibrary name="vrapi" failmsg="GearVR library not loaded and required!" />
			</true>
		</if> -->
	</soLoadLibrary>
</root>
